"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[2749],{6100:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=s(5893),t=s(1151);const r={},o="Basic concepts",c={id:"on-premises/basic-concepts",title:"Basic concepts",description:"osbuild-composer works with a concept of blueprints. A blueprint is a description of the final image and its customizations. A customization can be:",source:"@site/docs/on-premises/basic-concepts.md",sourceDirName:"on-premises",slug:"/on-premises/basic-concepts",permalink:"/docs/on-premises/basic-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/on-premises/basic-concepts.md",tags:[],version:"current",frontMatter:{},sidebar:"onPremises",next:{title:"Blueprint Reference",permalink:"/docs/on-premises/blueprint-reference"}},a={},l=[{value:"Example blueprint",id:"example-blueprint",level:2},{value:"Image types",id:"image-types",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"basic-concepts",children:"Basic concepts"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"osbuild-composer"})," works with a concept of ",(0,i.jsx)(n.strong,{children:"blueprints"}),". A blueprint is a description of the final ",(0,i.jsx)(n.strong,{children:"image"})," and its ",(0,i.jsx)(n.strong,{children:"customizations"}),". A ",(0,i.jsx)(n.strong,{children:"customization"})," can be:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"an additional RPM package"}),"\n",(0,i.jsx)(n.li,{children:"enabled service"}),"\n",(0,i.jsxs)(n.li,{children:["custom kernel command line parameter, and many others. See ",(0,i.jsx)(n.a,{href:"https://www.osbuild.org/guides/blueprint-reference/blueprint-reference.html#blueprint-reference",children:"Blueprint"})," reference for more details."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"image"})," is defined by its blueprint and ",(0,i.jsx)(n.strong,{children:"image type"}),", which is for example ",(0,i.jsx)(n.code,{children:"qcow2"})," (QEMU Copy On Write disk image) or ",(0,i.jsx)(n.code,{children:"AMI"})," (Amazon Machine Image)."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, ",(0,i.jsx)(n.code,{children:"osbuild-composer"})," also supports ",(0,i.jsx)(n.strong,{children:"upload targets"}),", which are cloud providers where an image can be stored after it is built. See the ",(0,i.jsx)(n.a,{href:"/docs/on-premises/uploading-to-cloud",children:"Uploading cloud images"})," section for more details."]}),"\n",(0,i.jsx)(n.h2,{id:"example-blueprint",children:"Example blueprint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'name = "base-image-with-tmux"\ndescription = "A base system with tmux"\nversion = "0.0.1"\n\n[[packages]]\nname = "tmux"\nversion = "*"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The blueprint is in ",(0,i.jsx)(n.a,{href:"https://toml.io/en/",children:"TOML format"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"image-types",children:"Image types"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"osbuild-composer"})," supports various types of output images. To see all supported types, run this command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ composer-cli compose types\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var i=s(7294);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);