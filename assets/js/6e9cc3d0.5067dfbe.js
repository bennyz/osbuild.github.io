"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[6771],{3978:(e,o,i)=>{i.r(o),i.d(o,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var s=i(5893),r=i(1151);const n={},t="osbuild-composer",c={id:"developer-guide/projects/osbuild-composer/index",title:"osbuild-composer",description:"It is a web service for building OS images. The core of osbuild-composer, which is common to all APIs, is osbuild manifests generation a job queuing. If an operating system is to be supported by osbuild-composer, it needs the manifest generation code in internal/distro directory. So far, we only focus on RPM based distributions, such as Fedora and RHEL. The queuing mechanism is under heavy development at the moment.",source:"@site/docs/developer-guide/projects/osbuild-composer/index.md",sourceDirName:"developer-guide/projects/osbuild-composer",slug:"/developer-guide/projects/osbuild-composer/",permalink:"/docs/developer-guide/projects/osbuild-composer/",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/projects/osbuild-composer/index.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Deprecation",permalink:"/docs/developer-guide/projects/osbuild/deprecation"},next:{title:"Local Cloud API Development",permalink:"/docs/developer-guide/projects/osbuild-composer/localcloud"}},d={},l=[{value:"Interfacing with dnf package manager",id:"interfacing-with-dnf-package-manager",level:2},{value:"Local API - Weldr",id:"local-api---weldr",level:2},{value:"Remote API - Cloud API",id:"remote-api---cloud-api",level:2}];function a(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h1,{id:"osbuild-composer",children:"osbuild-composer"}),"\n",(0,s.jsxs)(o.p,{children:["It is a web service for building OS images. The core of ",(0,s.jsx)(o.code,{children:"osbuild-composer"}),", which is common to all APIs, is osbuild manifests generation a job queuing. If an operating system is to be supported by ",(0,s.jsx)(o.code,{children:"osbuild-composer"}),", it needs the manifest generation code in ",(0,s.jsx)(o.code,{children:"internal/distro"})," directory. So far, we only focus on RPM based distributions, such as Fedora and RHEL. The queuing mechanism is under heavy development at the moment."]}),"\n",(0,s.jsx)(o.h2,{id:"interfacing-with-dnf-package-manager",children:"Interfacing with dnf package manager"}),"\n",(0,s.jsxs)(o.p,{children:["We use our custom wrapper for ",(0,s.jsx)(o.code,{children:"dnf"}),", which we call simply ",(0,s.jsx)(o.code,{children:"dnf-json"}),", because its interface goes like this:"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Stdin - takes  a JSON object"}),"\n",(0,s.jsx)(o.li,{children:"Stdout - returns a JSON object"}),"\n",(0,s.jsxs)(o.li,{children:["Return code is used ",(0,s.jsx)(o.strong,{children:"only"})," for ",(0,s.jsx)(o.code,{children:"dnf-json"})," internal errors, not for errors in the operation specified on the input. Those errors are reported in the returned JSON object."]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"local-api---weldr",children:"Local API - Weldr"}),"\n",(0,s.jsxs)(o.p,{children:["This API comes from the ",(0,s.jsx)(o.code,{children:"Lorax-composer project"}),". ",(0,s.jsx)(o.code,{children:"osbuild-composer"})," was created as a drop-in replacement for Lorax which influenced many design decisions. It uses Unix-Domain socket, so it is meant for local usage only. There are two clients:"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["composer-cli / ",(0,s.jsx)(o.a,{href:"https://github.com/osbuild/weldr-client",children:"weldr-client"})]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.a,{href:"https://github.com/osbuild/cockpit-composer",children:"cockpit-composer"})," (branded as Image Builder in the Cockpit console)"]}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["Activate this API by invoking ",(0,s.jsx)(o.code,{children:"systemctl start osbuild-composer.socket"}),". Systemd will create a socket at ",(0,s.jsx)(o.code,{children:"/run/weldr/api.socket"}),"."]}),"\n",(0,s.jsx)(o.h2,{id:"remote-api---cloud-api",children:"Remote API - Cloud API"}),"\n",(0,s.jsxs)(o.p,{children:["This is the ",(0,s.jsx)(o.code,{children:"/api/image-builder-composer/v2/"})," API endpoint. There are currently two clients, which are integrating with ",(0,s.jsx)(o.code,{children:"osbuild-composer"})," using this API:"]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.a,{href:"https://github.com/osbuild/image-builder",children:"image-builder"}),", described in more detail in the ",(0,s.jsx)(o.a,{href:"/docs/service/architecture",children:"Image Builder service architecture"})," document."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.a,{href:"https://github.com/osbuild/koji-osbuild",children:"koji-osbuild"})," plugin, which integrates ",(0,s.jsx)(o.code,{children:"osbuild-composer"})," with the ",(0,s.jsx)(o.a,{href:"https://koji.build/",children:"Koji"})," build system."]}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,r.a)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},1151:(e,o,i)=>{i.d(o,{Z:()=>c,a:()=>t});var s=i(7294);const r={},n=s.createContext(r);function t(e){const o=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(n.Provider,{value:o},e.children)}}}]);